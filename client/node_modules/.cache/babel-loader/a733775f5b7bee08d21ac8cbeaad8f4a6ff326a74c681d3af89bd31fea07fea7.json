{"ast":null,"code":"var _jsxFileName = \"D:\\\\IMS\\\\client\\\\src\\\\components\\\\Charts\\\\PieChart.js\",\n  _s = $RefreshSig$();\n// D:\\IMS\\client\\src\\components\\Charts\\CustomPieChart.js\nimport React, { useEffect, useState } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomPieChart = ({\n  collectionData,\n  by\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Fetch your data here and set it in state\n    // This is a placeholder for your data fetching function\n    const fetchChartData = async (collectionData, by) => {\n      // Replace with your actual data fetching logic\n      const response = await fetch(`/api/data?collection=${collectionData}&by=${by}`);\n      const result = await response.json();\n      return result;\n    };\n    fetchChartData(collectionData, by).then(responseData => {\n      setData(responseData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n    });\n  }, [collectionData, by]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data || !Array.isArray(data)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n  const chartData = {\n    labels: data.map(item => item.label),\n    datasets: [{\n      data: data.map(item => item.value),\n      backgroundColor: data.map(item => item.color)\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomPieChart, \"Zn4cs3026OJRBhxLd0Oqj+bUOXY=\");\n_c = CustomPieChart;\nexport default CustomPieChart;\nvar _c;\n$RefreshReg$(_c, \"CustomPieChart\");","map":{"version":3,"names":["React","useEffect","useState","Pie","jsxDEV","_jsxDEV","CustomPieChart","collectionData","by","_s","data","setData","loading","setLoading","fetchChartData","response","fetch","result","json","then","responseData","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","chartData","labels","map","item","label","datasets","value","backgroundColor","color","_c","$RefreshReg$"],"sources":["D:/IMS/client/src/components/Charts/PieChart.js"],"sourcesContent":["// D:\\IMS\\client\\src\\components\\Charts\\CustomPieChart.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst CustomPieChart = ({ collectionData, by }) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch your data here and set it in state\r\n    // This is a placeholder for your data fetching function\r\n    const fetchChartData = async (collectionData, by) => {\r\n      // Replace with your actual data fetching logic\r\n      const response = await fetch(`/api/data?collection=${collectionData}&by=${by}`);\r\n      const result = await response.json();\r\n      return result;\r\n    };\r\n\r\n    fetchChartData(collectionData, by).then(responseData => {\r\n      setData(responseData);\r\n      setLoading(false);\r\n    }).catch(error => {\r\n      console.error('Error fetching data:', error);\r\n      setLoading(false);\r\n    });\r\n  }, [collectionData, by]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!data || !Array.isArray(data)) {\r\n    return <div>No data available</div>;\r\n  }\r\n\r\n  const chartData = {\r\n    labels: data.map(item => item.label),\r\n    datasets: [{\r\n      data: data.map(item => item.value),\r\n      backgroundColor: data.map(item => item.color),\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Pie data={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomPieChart;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAG,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMa,cAAc,GAAG,MAAAA,CAAOP,cAAc,EAAEC,EAAE,KAAK;MACnD;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwBT,cAAc,OAAOC,EAAE,EAAE,CAAC;MAC/E,MAAMS,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpC,OAAOD,MAAM;IACf,CAAC;IAEDH,cAAc,CAACP,cAAc,EAAEC,EAAE,CAAC,CAACW,IAAI,CAACC,YAAY,IAAI;MACtDT,OAAO,CAACS,YAAY,CAAC;MACrBP,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CAACQ,KAAK,CAACC,KAAK,IAAI;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CT,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACN,cAAc,EAAEC,EAAE,CAAC,CAAC;EAExB,IAAII,OAAO,EAAE;IACX,oBAAOP,OAAA;MAAAmB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAI,CAAClB,IAAI,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACpB,IAAI,CAAC,EAAE;IACjC,oBAAOL,OAAA;MAAAmB,QAAA,EAAK;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACrC;EAEA,MAAMG,SAAS,GAAG;IAChBC,MAAM,EAAEtB,IAAI,CAACuB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC;IACpCC,QAAQ,EAAE,CAAC;MACT1B,IAAI,EAAEA,IAAI,CAACuB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,KAAK,CAAC;MAClCC,eAAe,EAAE5B,IAAI,CAACuB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACK,KAAK;IAC9C,CAAC;EACH,CAAC;EAED,oBACElC,OAAA;IAAAmB,QAAA,eACEnB,OAAA,CAACF,GAAG;MAACO,IAAI,EAAEqB;IAAU;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAACnB,EAAA,CA5CIH,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AA8CpB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}